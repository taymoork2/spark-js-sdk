/* globals browser */
import {expect} from 'chai';
import {flaky} from '@webex/test-helper-mocha';
import testUsers from '@webex/test-helper-test-users';

describe('samples', () => {
  describe('browser-plugin-meetings', () => {
    describe('normal dialing', () => {
      let mccoy, spock;

      const browserSpock = browser.select('browserSpock');
      const browserMccoy = browser.select('browserMccoy');

      before('create test users', () => testUsers.create({count: 2})
        .then((users) => {
          [mccoy, spock] = users;

          // Adding pause to let test users propagate through integration
          browser.pause(2500);
        }));

      before('reload browser', () => {
        browser.refresh();
      });

      it('loads the app', () => {
        browser.url('/browser-plugin-meetings');
        browser.waitForExist('#access-token', 1500);
      });

      it('connects mccoys\'s browser', () => {
        expect(browserMccoy.getTitle()).to.equal('Sample: Meetings');
        browserMccoy.execute((token) => {
          // eslint-disable-next-line no-undef
          document.querySelector('[placeholder="Your access token"]').value += token;
        }, mccoy.token.access_token);
        browserMccoy.pause(10000);
        browserMccoy.click('#connect');

        browserMccoy.waitUntil(() => {
          // Test runs too quickly sometimes and tries to click before call is fully established
          if (browserMccoy.getText('#connection-status') !== 'connected') {
            return false;
          }

          return true;
        }, 10000, 'Timed-out waiting for login');
      });

      it('connects spock\'s browser', () => {
        expect(browserSpock.getTitle()).to.equal('Sample: Meetings');
        browserSpock.execute((token) => {
          // eslint-disable-next-line no-undef
          document.querySelector('[placeholder="Your access token"]').value += token;
        }, spock.token.access_token);
        browserSpock.pause(10000);
        browserSpock.click('#connect');
        browserSpock.waitUntil(() => {
          // Test runs too quickly sometimes and tries to click before call is fully established
          if (browserSpock.getText('#connection-status') !== 'connected') {
            return false;
          }

          return true;
        }, 10000, 'Timed-out waiting for login');
      });

      it('places call from spock to mccoy', () => {
        browserSpock.setValue('#invitee', mccoy.emailAddress);
        browserSpock.click('[title="create"]');
        browserSpock.pause(5000);
        browserSpock.click('#join');
        browserSpock.pause(5000);
        browserSpock.click('#addMedia');
      });

      flaky(it, process.env.SKIP_FLAKY_TESTS)('mccoy answers the call', () => {
        browserMccoy.pause(5000);
        browserMccoy.waitForVisible('#answer', 20000);
        browserMccoy.click('#answer');
        browserMccoy.pause(5000);
        browserMccoy.waitForVisible('#addMedia', 20000);
        browserMccoy.click('#addMedia');
        browserMccoy.waitForVisible('#remotevideo', 20000);
        browserMccoy.waitForVisible('#stop-sending-audio', 20000);
        browserMccoy.click('#stop-sending-audio');
        browserSpock.waitForVisible('#stop-sending-audio', 20000);
        browserSpock.click('#stop-sending-audio');
        browserMccoy.pause(160000);
      });

      it('ends the call', () => {
        browser.click('#leave');
      });
    });
  });
});
