import {createUser} from '@ciscospark/test-helper-appid';
import uuid from 'uuid';
import {expect} from 'chai';

describe('samples', () => {
  describe('browser-auth-jwt', () => {
    describe('authenticate using jwt', () => {
      let spockJwt;

      before('creates spock jwt', () => createUser({displayName: `test-${uuid.v4()}`})
        .then(({jwt}) => {
          console.log(jwt);
          spockJwt = jwt;
        }));

      before('reload browser', () => {
        browser.refresh();
      });

      it('browses to sample app and verifies the user is not authenticated', () => {
        browser.url('/browser-auth-jwt');

        expect(browser.select('browserSpock').getText('#authentication-status')).to.equal('Not Authenticated');
        expect(browser.select('browserMccoy').getText('#authentication-status')).to.equal('Not Authenticated');
      });

      it('initiates jwt authentication', () => {
        browser.setValue('[placeholder="JSON Web Token"]', spockJwt);
        browser.click('[title="authenticate"]');

        browser.waitUntil(() => browser.getText('#authentication-status') !== 'Not Authenticated', 10000, 'Timed-out waiting for jwt to authenticate', 2000);

        expect(browser.select('browserSpock').getText('#authentication-status')).to.equal('Authenticated');
        expect(browser.select('browserMccoy').getText('#authentication-status')).to.equal('Authenticated');
      });
    });
  });
});
