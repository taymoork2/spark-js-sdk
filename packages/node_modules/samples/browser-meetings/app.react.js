/* eslint-env browser */

/* global ciscospark, React, ReactDOM */

/* eslint-disable camelcase */
/* eslint-disable max-nested-callbacks */
/* eslint-disable no-alert */
/* eslint-disable no-console */
/* eslint-disable require-jsdoc */

// Declare some globals that we'll need throughout
let spark;

class App extends React.Component {
  state = {
    accessToken: localStorage.getItem('access-token') || '',
    authenticated: false,
    connected: false,
    connectAddress: 'taykhan@cisco.com',
    meeting: null,
    videoBox: false,
    sendAudio: true,
    sendVideo: true,
    recieveAudio: true,
    recieveVideo: true,
    screenshare: false
  };

  localMedia = React.createRef();

  remoteMedia = React.createRef();

  authenticate = (e) => {
    e.preventDefault();

    window.teams = spark = ciscospark.init({
      // eslint-disable-line no-multi-assign
      config: {
        // Any other sdk config we need
      },
      credentials: {
        access_token: this.state.accessToken
      }
    });

    if (!spark.internal.device.registered) {
      spark.internal.device
        .register()
        .then(() => {
          // This is just a little helper for our selenium tests and doesn't
          // really matter for the example
          document.body.classList.add('listening');
          this.setState({
            authenticated: true
          });
          localStorage.setItem('access-token', this.state.accessToken);
          // return this.spark.internal.device.register()
          return spark.internal.mercury.connect();
        })
        // This is a terrible way to handle errors, but anything more specific is
        // going to depend a lot on your app
        .catch((err) => {
          console.error(err);
          // we'll rethrow here since we didn't really *handle* the error, we just
          // reported it
          throw err;
        });
    }
  };

  connect = (e) => {
    e.preventDefault();

    spark.meetings.create(this.state.connectAddress).then(async (meeting) => {
      meeting.on('media:ready', (media) => {
        console.log(media.type);
        if (media.type === 'local') {
          this.localMedia.current.srcObject = media.stream;
        }

        if (media.type === 'remote') {
          this.remoteMedia.current.srcObject = media.stream;
        }
      });

      meeting.join({
        mediaDirection: {
          sendAudio: this.state.sendAudio,
          sendVideo: this.state.sendVideo,
          receiveAudio: this.state.recieveAudio,
          receiveVideo: this.state.recieveVideo,
          pstn: false,
          sendShare: false,
          receiveShare: false
        }
      });

      this.setState({
        meeting,
        connected: true,
        videoBox: true
      });
    });
  };

  disconnect = (e) => {
    e.preventDefault();

    this.state.meeting.leave();
    this.localMedia.current.srcObject = null;
    this.remoteMedia.current.srcObject = null;

    this.setState({
      meeting: null,
      videoBox: false
    });
  };

  setConnectAddress = (address) => {
    this.setState({
      connectAddress: address
    });
  };

  setToken = (token) => {
    this.setState({
      accessToken: token
    });
  };

  render() {
    return (
      <React.Fragment>
        <h1>Meetings Kitchen Sink</h1>
        <p>
          This is the start of the "kitchen sink" demo app for plugin-meetings.
        </p>
        <section>
          <h2>Connect first:</h2>
          <form onSubmit={(e) => this.authenticate(e)}>
            <fieldset>
              <legend>Credentials</legend>
              <input
                name="accessToken"
                placeholder="Your access token"
                onChange={(e) => this.setToken(e.target.value)}
                type="text"
                value={this.state.accessToken}
              />
              <button type="submit">connect</button>
              <p>{this.state.authenticated ? 'connected' : 'disconnected'}</p>
            </fieldset>
          </form>
        </section>
        {
          // <section>
          //   <h2>Then click:</h2>
          //     <fieldset>
          //       <legend>Meeting Controls</legend>
          //       <button
          //         id="meetings-object"
          //         title="meetings object"
          //         type="button"
          //         onClick={(e) => {
          //           e.preventDefault();
          //           if (this.state.meetings) console.log(this.state.meetings);
          //         }}
          //       >
          //         Meetings
          //       </button>
          //     </fieldset>
          // </section>
        }
        <section>
          <h2>Call Controls</h2>
          <fieldset>
            <legend>Controls</legend>
            <label>
              <input
                name="Show Video"
                type="checkbox"
                checked={this.state.sendVideo}
                onChange={() => {
                  if (this.state.meeting) {
                    this.state.sendVideo
                      ? this.state.meeting.startSendingVideo()
                      : this.state.meeting.stopSendingVideo();
                  }

                  this.setState({sendVideo: !this.state.sendVideo});
                }}
              />
              Send Video
            </label>
            <label>
              <input
                name="Show Audio"
                type="checkbox"
                checked={this.state.sendAudio}
                onChange={() => {
                  if (this.state.meeting) {
                    this.state.sendAudio
                      ? this.state.meeting.startSendingAudio()
                      : this.state.meeting.stopSendingAudio();
                  }

                  this.setState({sendAudio: !this.state.sendAudio});
                }}
              />
              Send Audio
            </label>
            <label>
              <input
                name="Screenshare"
                type="checkbox"
                checked={this.state.screenshare}
                onChange={() =>
                  this.setState({screenshare: !this.state.screenshare})
                }
              />
              Screenshare
            </label>
            <br />
            <label>
              <input
                name="Recieve Video"
                type="checkbox"
                checked={this.state.recieveVideo}
                onChange={() =>
                  this.setState({recieveVideo: !this.state.recieveVideo})
                }
              />
              Recieve Video
            </label>
            <label>
              <input
                name="Recieve Audio"
                type="checkbox"
                checked={this.state.recieveAudio}
                onChange={() =>
                  this.setState({recieveAudio: !this.state.recieveAudio})
                }
              />
              Recieve Audio
            </label>
          </fieldset>
        </section>
        <section>
          <h2>Dialer:</h2>
          <form
            onSubmit={(e) =>
              (this.state.connected ? this.disconnect(e) : this.connect(e))
            }
          >
            <fieldset>
              <legend>Dialer</legend>
              <input
                id="invitee"
                name="invitee"
                type="text"
                onChange={(e) => this.setConnectAddress(e.target.value)}
                value={this.state.connectAddress}
              />
              <button type="submit" disabled={!this.state.authenticated}>
                {this.state.connected ? 'disconnect' : 'connect'}
              </button>
            </fieldset>
          </form>
        </section>
        <br />
        {this.state.videoBox && (
          <React.Fragment>
            <video
              autoPlay
              playsInline
              ref={this.localMedia}
              style={{height: '500px', width: '500px'}}
            />
            <video
              autoPlay
              playsInline
              ref={this.remoteMedia}
              style={{height: '500px', width: '500px'}}
            />
          </React.Fragment>
        )}
      </React.Fragment>
    );
  }
}

ReactDOM.render(<App />, document.getElementById('root'));
