import testUsers from '@ciscospark/test-helper-test-users';

describe('samples', () => {
  describe('browser-auth-implicit', () => {
    describe('authenticate using implicit grant flow', () => {
      let spock;

      before('creates spock', () => testUsers.create({count: 1, config: {displayName: 'Spock'}})
        .then((users) => {
          [spock] = users;
        }));

      before('reload browser', () => {
        browser.refresh();
        browser.select('browserMccoy').refresh();
      });

      it('browses to sample app and verifies the user is not authenticated', () => {
        browser.url('/browser-auth-implicit');
        browser.assertText('#authentication-status', 'Not Authenticated');
      });

      it('initiates implicit grant authentication flow', () => {
        browser.click('[title="authenticate"]');
      });

      it('enters user login information', () => {
        // the login pages aren't known for their consistency, so we'll break with
        // out pattern of using accessibility labels for test selectors in favor
        // of using the well known (if not a11y helpful) ids.
        browser.waitForExist('#IDToken1');

        // Enter Email if we haven't already filled it in
        if (!browser.isVisible('#IDToken1[readonly]')) {
          browser.setValue('#IDToken1', spock.email);
          browser.click('#IDButton2');
        }
        for (let i = 0; i < 3; i += 1) {
          browser.waitForExist('#IDToken2');

          browser.setValue('#IDToken2', spock.password);
          browser.click('#Button1');

          if (!browser.isVisible('.generic-error')) {
            break;
          }
        }

        // I feel like there's a better way to do this...
        if (browser.isVisible('.generic-error')) {
          throw new Error('Failed to login after several attempts');
        }
      });

      it('accepts the permissions grant if it appears', () => {
        // Optionally handle the grant page, but don't fail if this is an app that
        // doesn't show the grant page.
        try {
          browser.waitForExist('button[name="accept"]');
          browser.click('button[name="accept"]');
        }
        catch (err) {
          //
        }
      });

      it('verifies authentication was successful', () => {
        browser.assertTitle('Authentication - Implicit Grant Flow');
        browser.assertText('#authentication-status', 'Authenticated');
        browser.assertAttribute('[title="logout"]', 'value', 'logout');
      });

      it('logs out', () => {
        browser.click('[title="logout"]');
        browser.assertTitle('Authentication - Implicit Grant Flow');
        browser.assertText('#authentication-status', 'Not Authenticated');
      });
    });
  });
});
