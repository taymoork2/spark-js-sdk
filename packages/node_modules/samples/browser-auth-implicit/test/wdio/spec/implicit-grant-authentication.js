import testUsers from '@ciscospark/test-helper-test-users';
import {expect} from 'chai';

describe('samples', () => {
  describe('browser-auth-implicit', () => {
    describe('authenticate using implicit grant flow', () => {
      let spock;

      before('creates spock', () => testUsers.create({count: 1, config: {displayName: 'Spock'}})
        .then((users) => {
          [spock] = users;
        }));

      before('reload browser', () => {
        browser.refresh();
      });

      it('browses to sample app and verifies the user is not authenticated', () => {
        browser.url('/browser-auth-implicit');

        expect(browser.select('browserSpock').getText('#authentication-status')).to.equal('Not Authenticated');
        expect(browser.select('browserMccoy').getText('#authentication-status')).to.equal('Not Authenticated');
      });

      it('initiates implicit grant authentication flow', () => {
        browser.click('[title="authenticate"]');
      });

      it('enters user login information', () => {
        // Wait 1s to redirect to idbroker and wait for form to render
        browser.pause(1000);
        browser.waitForExist('#IDToken1');

        // the login pages aren't known for their consistency, so we'll break with
        // out pattern of using accessibility labels for test selectors in favor
        // of using the well known (if not a11y helpful) ids.
        browser.setValue('#IDToken1', spock.email);
        browser.click('#IDButton2');

        browser.waitForExist('#IDToken2');
        browser.setValue('#IDToken2', spock.password);
        browser.click('#Button1');

        // I feel like there's a better way to do this...
        // if (browser.isVisible('#generic-error')) {
        //   throw new Error('Failed to login after several attempts');
        // }
      });

      it('accepts the permissions grant if it appears', () => {
        // Wait 1s for grant page to load
        browser.pause(1000);
        // Optionally handle the grant page, but don't fail if this is an app that
        // doesn't show the grant page.
        browser.waitForExist('button[name="accept"]');
        browser.click('button[name="accept"]');
      });

      it('verifies authentication was successful', () => {
        // Wait 1s to redirect back from idbroker and wait for logout button to render
        browser.pause(1000);
        browser.waitForExist('[title="logout"]');

        expect(browser.select('browserSpock').getTitle()).to.equal('Authentication - Implicit Grant Flow');
        expect(browser.select('browserMccoy').getTitle()).to.equal('Authentication - Implicit Grant Flow');

        expect(browser.select('browserSpock').getText('#authentication-status')).to.equal('Authenticated');
        expect(browser.select('browserMccoy').getText('#authentication-status')).to.equal('Authenticated');

        expect(browser.select('browserSpock').getValue('[title="logout"]')).to.equal('logout');
        expect(browser.select('browserSpock').getValue('[title="logout"]')).to.equal('logout');
      });

      it('logs out', () => {
        browser.click('[title="logout"]');
        browser.pause(1000);

        expect(browser.select('browserMccoy').getText('#authentication-status')).to.equal('Not Authenticated');
        // Skip next due to bug on sauce
        if (!process.env.SC_TUNNEL_IDENTIFIER) expect(browser.select('browserSpock').getText('#authentication-status')).to.equal('Not Authenticated');
      });
    });
  });
});
