import {} from '../constants';

const mediaSharesUtils = {};

mediaSharesUtils.parse = (mediaShares) => {
  if (mediaShares) {
    return {
      contentId: mediaSharesUtils.getContentId(mediaShares),
      disposition: mediaSharesUtils.getDisposition(mediaShares)
    };
  }
  return null;
};

mediaSharesUtils.getMediaShares = (oldShare, newShare) => {
  const previous = oldShare && mediaSharesUtils.parse(oldShare);
  const current = newShare && mediaSharesUtils.parse(newShare);
  return {
    previous,
    current,
    updates: {
      // isNewContentSharing: mediaSharesUtils.checkNewContentSharer(previous, current)
    }
  };
};

mediaSharesUtils.checkNewContentSharer = (previous, current) => {
  if (previous && current) {
    if (previous.contentId !== current.contentId) {
      return {
        isNewId: true,
        newId: current.contentId,
        oldId: previous.contentId
      };
    }
    if (previous.contentId === current.contentId) {
      if (previous.disposition !== current.disposition) {
        return {
          isNewStatus: true,
          newStatus: current.disposition,
          oldStatus: previous.disposition
        };
      }
    }
    if (previous.disposition !== current.disposition) {
      return true;
    }
  }
  return false;
};

mediaSharesUtils.getDisposition = (mediaShares) => {
  const contentFloor = mediaSharesUtils.extractContentFloor(mediaShares);
  return contentFloor ? contentFloor.disposition : null;
};

mediaSharesUtils.extractContent = (mediaShares) => {
  let content = null;
  if (mediaShares && mediaShares.length) {
    const supposed = mediaShares[0];
    if (supposed && supposed.name === 'content') {
      content = supposed;
    }
  }
  return content;
};

mediaSharesUtils.extractFloor = (content) => {
  let floor = null;
  if (content) {
    floor = content.floor;
  }
  return floor;
};

mediaSharesUtils.extractContentFloor = (mediaShares) => {
  let contentFloor = null;
  const content = mediaSharesUtils.extractContent(mediaShares);
  contentFloor = mediaSharesUtils.extractFloor(content);
  return contentFloor;
};

mediaSharesUtils.getContentId = (mediaShares) => {
  let id = null;
  const contentFloor = mediaSharesUtils.extractContentFloor(mediaShares);
  if (contentFloor && contentFloor.beneficiary) {
    id = contentFloor.beneficiary.id;
  }
  return id;
};

export default mediaSharesUtils;
