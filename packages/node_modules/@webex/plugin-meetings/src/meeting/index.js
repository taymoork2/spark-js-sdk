/*!
 * Copyright (c) 2015-2018 Cisco Systems, Inc. See LICENSE file.
 */

/**
  *
  * Events to emit
  * ==============
  * - leave
  * - join
  * - end
  * - meeting.metrics {
  *   - media
  *   - MQE
  *   - callAnalyzer
  *   - meetingEndMetrics?
  * }
  * - statusChange {
  *   - status, e.g., leaving, left, reason
  * }
  * - typeChange {
  *   - type
      - reason
  * }
  *
  * @class
  */
export default class Meeting {
  /**
   * Creates an instance of Meeting
   *
   * @param {*} {
   *     id, spaceID, peerConnections, participants, health, type, direction, pairedDevice, startTime, endTime
   *   }
   * @memberof Meeting
   */
  constructor({
    id, spaceID, peerConnections, participants, health, type, direction, pairedDevice, startTime, endTime
  }) {
    this.id = id;
    this.spaceID = spaceID;
    this.peerConnections = peerConnections;
    this.participants = participants;
    this.health = health;
    this.type = type;
    this.direction = direction;
    this.pairedDevice = pairedDevice;
    this.startTime = startTime || new Date().toISOString();
    this.endTime = endTime || new Date().toISOString();
  }

  /**
   *
   * Specify joining via audio (option: pstn), video, screenshare
   *
   * @exports
   * @param {*} [options={ Paird Device, Password }]
   * @returns {Promise}
   * @memberof Meeting
   */
  join(options = {}) {
    return new Promise((resolve, reject) => {
      resolve();
    });
  }

  /**
   *
   * move this meeting to given device
   * only possible if you are paired with the given device
   *
   * @param {*} deviceID
   * @returns {Promise}
   * @memberof Meeting
   */
  moveToDevice(deviceID) {
    return new Promise((resolve, reject) => {

    });
  }

  /**
   *
   * Move this meeting back to "my laptop"
   * @returns {Promise}
   * @memberof Meeting
   */
  moveToClient() {
    return new Promise((resolve, reject) => {

    });
  }

  /**
   *
   *
   * @param {*} [options={}]
   * @param {*} status
   * @returns {Promise}
   * @memberof Meeting
   */
  updateAudio(options = {}, status) {
    return new Promise((resolve, reject) => {

    });
  }

  /**
   *
   *
   * @param {*} status
   * @returns {Promise}
   * @memberof Meeting
   */
  updateVideo(status) {
    return new Promise((resolve, reject) => {

    });
  }

  /**
   *
   *
   * @param {*} shareType
   * @returns {Promise}
   * @memberof Meeting
   */
  updateShare(shareType) {
    return new Promise((resolve, reject) => {

    });
  }

  /**
   *
   * Alias of updateShare
   * @param {*} args
   * @memberof Meeting
   * @returns {updateShare}
   */
  share(...args) {
    this.updateShare(args);
  }

  leave() {
    return new Promise((resolve, reject) => {

    });
  }

  decline() {
    return new Promise((resolve, reject) => {

    });
  }

  sendDtmf() {
    return new Promise((resolve, reject) => {

    });
  }

  getStats() {
    return new Promise((resolve, reject) => {

    });
  }

  lock() {

  }

  unlock() {

  }

  startRecording() {

  }

  stopRecording() {

  }
}
