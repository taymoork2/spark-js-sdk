/*!
 * Copyright (c) 2015-2019 Cisco Systems, Inc. See LICENSE file.
 */
import {
  MEETINGS,
  IN_LOBBY,
  NOT_IN_MEETING,
  IN_MEETING
} from '../constants';

import MemberUtil from './util.js';

/**
 * @class Member
 */
export default class Member {
  namespace = MEETINGS;

  /**
   * @param {Object} participant - the locus participant
   * @param {Object} options - optional constructor params
   * @returns {Member}
   * @memberof Member
   * shallow copies locus participant object into a meeting member object
   */
  constructor(participant, options = {}) {
    this.participant = null;
    this.isAudioMuted = null;
    this.isVideoMuted = null;
    this.id = null;
    this.isSelf = null;
    this.isHost = null;
    this.isGuest = null;
    this.isInLobby = null;
    this.isInMeeting = null;
    this.isNotInMeeting = null;
    this.isNotAdmitted = null;
    this.isContentSharing = null;
    this.status = null;
    this.isDevice = null;
    this.isUser = null;
    // this.processOptions(options); TODO:
    this.processParticipant(participant);
    this.processParticipantOptions(participant, options);
  }

  processParticipant(participant) {
    this.participant = participant;
    if (participant) {
      this.processId(participant);
      this.processAudio(participant);
      this.processGuest(participant);
      this.processUser(participant);
      this.processDevice(participant);
      this.processStatus(participant);
      this.processAdmitted(participant);
    }
  }

  processOptions(options) {
    // TODO:
    if (options) {
      this.isAudioMuted = null;
      this.isVideoMuted = null;
      this.id = null;
      this.isSelf = null;
      this.isHost = null;
      this.isGuest = null;
      this.isInLobby = null;
      this.isInMeeting = null;
      this.isNotInMeeting = null;
      this.isNotAdmitted = null;
      this.isContentSharing = null;
      this.status = null;
      this.isDevice = null;
      this.isUser = null;
    }
  }

  processParticipantOptions(participant, options) {
    if (participant && options) {
      this.processIsSelf(participant, options.selfId);
      this.processIsHost(participant, options.hostId);
      this.processIsContentSharing(participant, options.contentSharingId);
    }
  }

  processId(participant) {
    this.id = participant.id;
  }

  processAudio(participant) {
    this.isAudioMuted = MemberUtil.isAudioMuted(participant);
  }

  processVideo(participant) {
    this.isVideoMuted = MemberUtil.isVideoMuted(participant);
  }

  processGuest(participant) {
    this.isGuest = MemberUtil.isGuest(participant);
  }

  processUser(participant) {
    this.isUser = MemberUtil.isUser(participant);
  }

  processDevice(participant) {
    this.isDevice = MemberUtil.isDevice(participant);
  }

  // must be done last
  processAdmitted(participant) {
    this.isNotAdmitted = MemberUtil.isNotAdmitted(participant) && this.isGuest && this.status === IN_LOBBY;
  }

  processStatus(participant) {
    this.status = MemberUtil.extractStatus(participant);
    switch (this.status) {
      case IN_LOBBY:
        this.isInLobby = true;
        this.isInMeeting = false;
        this.isNotInMeeting = false;
        break;
      case IN_MEETING:
        this.isInLobby = false;
        this.isInMeeting = true;
        this.isNotInMeeting = false;
        break;
      case NOT_IN_MEETING:
        this.isInLobby = false;
        this.isInMeeting = false;
        this.isNotInMeeting = true;
        break;
      default:
        this.isInLobby = false;
        this.isInMeeting = false;
        this.isNotInMeeting = true;
    }
  }

  setIsContentSharing(flag) {
    this.isContentSharing = flag;
  }

  processIsContentSharing(participant, sharingId) {
    if (MemberUtil.isUser(participant)) {
      this.isContentSharing = MemberUtil.isSame(participant, sharingId);
    }
    else if (MemberUtil.isDevice(participant)) {
      this.isContentSharing = MemberUtil.isAssociatedSame(participant, sharingId);
    }
  }

  processIsSelf(participant, selfId) {
    if (MemberUtil.isUser(participant)) {
      this.isSelf = MemberUtil.isSame(participant, selfId);
    }
    else if (MemberUtil.isDevice(participant)) {
      this.isSelf = MemberUtil.isAssociatedSame(participant, selfId);
    }
  }

  processIsHost(participant, hostId) {
    if (MemberUtil.isUser(participant)) {
      this.isHost = MemberUtil.isSame(participant, hostId);
    }
    else if (MemberUtil.isDevice(participant)) {
      this.isHost = MemberUtil.isSame(participant, hostId);
    }
  }
}
